

@model IsraaSystem.Web.Areas.HumanResource.Models.EmployeeReport.EmployeeReportVm
@using IsraaSystem.Application.HumanResource
@using IsraaSystem.Web.Common
@using IsraaSystem.Web.Models
@using MVCGrid.Web


@{
  ViewBag.Title = "الرئيسية";
  ViewBag.Menu = "#menu-dashboard";
  Layout = "~/Areas/HumanResource/Views/Shared/_Layout.cshtml";

}

@section PageStyles {
  <!-- BEGIN PAGE LEVEL PLUGINS -->
  <link href="~/assets/global/plugins/datatables/datatables.min.css" rel="stylesheet" type="text/css" />
  <link href="~/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap-rtl.css" rel="stylesheet" type="text/css" />

  <link href="~/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.css" rel="stylesheet" />
  <!-- END PAGE LEVEL PLUGINS -->

  <style>
    .dt-button-collection {
      width: 50% !important;
    }

      .dt-button-collection a {
        width: 49% !important;
        float: left !important;
      }

    div.dt-button-collection {
      border: 1px solid #d4c1c1 !important;
      box-shadow: unset !important;
      padding: 0 !important;
    }

    .filter {
      background-color: cornsilk;
    }


    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
      background-color: #ffffff !important;
    }
  </style>
}

@section PagePlugins {
  <!-- BEGIN PAGE LEVEL PLUGINS -->



  <script src="~/assets/global/scripts/datatable.js" type="text/javascript"></script>
  <script src="~/assets/global/plugins/datatables/datatables.min.js" type="text/javascript"></script>
  <script src="~/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.js" type="text/javascript"></script>
  <script src="http://cdn.datatables.net/plug-ins/1.10.19/dataRender/datetime.js" type="text/javascript"></script>
  <!-- END PAGE LEVEL PLUGINS -->
}

@section PageScripts {

  <!-- BEGIN PAGE LEVEL SCRIPTS -->
  <script>
  var TableDatatablesButtons = function () {

    var initTable1 = function () {
      const table = $('#sample_1');

      var oTable = table.dataTable({

        // Internationalisation. For more info refer to http://datatables.net/manual/i18n
        "language": {
          "aria": {
            "sortAscending": ": activate to sort column ascending",
            "sortDescending": ": activate to sort column descending"
          },
          "emptyTable": "No data available in table",
          "info": "عرض _START_ الى _END_ من _TOTAL_ سجلات",
          "infoEmpty": "لا توجد بيانات",
          "infoFiltered": "(filtered1 from _MAX_ total entries)",
          "lengthMenu": "_MENU_ سجلات",
          "search": "بحث:",
          "zeroRecords": "No matching records found"
        },

        // Or you can use remote translation file
        //"language": {
        //   url: '//cdn.datatables.net/plug-ins/3cfcc339e89/i18n/Portuguese.json'
        //},
        searchDelay: 3350,//Set a throttle frequency for searching.
        "serverSide": true, // for process server side
        //"filter": true, // this is for disable filter (search box)
        "ajax": {
          "url": '@Url.Action("LoadData")',
          "type": "POST",
          "datatype": "json",
          "data": function (d) {
            d.EmployeeNo = $('#EmployeeNo').val();
            d.ArName= $('#ArName').val();
            d.EnName= $('#EnName').val();
            d.ArFirstName= $('#ArFirstName').val();
            d.ArSecoundName= $('#ArSecoundName').val();

            d.ArThirdName= $('#ArThirdName').val();
            d.ArFamilyName= $('#ArFamilyName').val();
            d.Gender = $('#Gender').val();
            d.DateOfBirthFrom = $('#DateOfBirthFrom').val();
            d.DateOfBirthTo = $('#DateOfBirthTo').val();
            d.SSN= $('#SSN').val();

            d.MaritalStatusID = $('#MaritalStatusID').val();
            d.ChildrensCount= $('#ChildrensCount').val();
            d.Address= $('#Address').val();
            d.Mobile= $('#Mobile').val();
            d.UniversityEmail= $('#UniversityEmail').val();

            d.Email= $('#Email').val();
            d.EmployeeStatus = $('#EmployeeStatus').val();

            d.StartDateEmpStatusFrom = $('#StartDateEmpStatusFrom').val();
            d.StartDateEmpStatusTo = $('#StartDateEmpStatusTo').val();


            d.EndDateEmpStatusFrom = $('#EndDateEmpStatusFrom').val();
            d.EndDateEmpStatusTo = $('#EndDateEmpStatusTo').val();

            d.JobTitle= $('#JobTitle').val();


            d.Department= $('#Department').val();
            d.DepartmentName= $('#DepartmentName').val();
            d.ManagerName= $('#ManagerName').val();
            d.EmploymentType= $('#EmploymentType').val();
            d.StartDateEmpEmploymentTypeFrom = $('#StartDateEmpEmploymentTypeFrom').val();
            d.StartDateEmpEmploymentTypeTo = $('#StartDateEmpEmploymentTypeTo').val();

            d.EndDateEmpEmploymentTypeFrom = $('#EndDateEmpEmploymentTypeFrom').val();
            d.EndDateEmpEmploymentTypeTo = $('#EndDateEmpEmploymentTypeTo').val();

            d.AttendanceDefault= $('#AttendanceDefault').val();
            d.CaderID= $('#CaderID').val();
            d.PlacementStatusID = $('#PlacementStatusID').val();
            d.PlacementTypeID = $('#PlacementTypeID').val();

            d.QualificationTypeID = $('#QualificationTypeID').val();
            d.Specialization = $('#Specialization').val();

            d.BasicSalaryFrom = $('#BasicSalaryFrom').val();
            d.BasicSalaryTo = $('#BasicSalaryTo').val();

          }
        },
        "columns": [
          { "data": "EmployeeNo", "name": "EmployeeNo"},
          { "data": "ArName", "name": "ArName"},
          { "data": "EnName", "name": "EnName"},
          { "data": "ArFirstName", "name": "ArFirstName" },
          { "data": "ArSecoundName", "name": "ArSecoundName" },

          { "data": "ArThirdName", "name": "ArThirdName"},
          { "data": "ArFamilyName", "name": "ArFamilyName"},
          { "data": "Gender", "name": "Gender"},
          { "data": "DateOfBirth", "name": "DateOfBirth","render":function (value) {
              if (value === null) return "";

              var pattern = /Date\(([^)]+)\)/;
              var results = pattern.exec(value);
              var dt = new Date(parseFloat(results[1]));

              return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();}
            },
          { "data": "SSN", "name": "SSN" },

          { "data": "MaritalStatus", "name": "MaritalStatus"},
          { "data": "ChildrensCount", "name": "ChildrensCount"},
          { "data": "Address", "name": "Address"},
          { "data": "Mobile", "name": "Mobile" },
          { "data": "UniversityEmail", "name": "UniversityEmail" },

          { "data": "Email", "name": "Email"},
          { "data": "EmployeeStatus", "name": "EmployeeStatus"},
          { "data": "StartDateEmpStatus", "name": "StartDateEmpStatus","render":function (value) {
            if (value === null) return "";

            var pattern = /Date\(([^)]+)\)/;
            var results = pattern.exec(value);
            var dt = new Date(parseFloat(results[1]));

            return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();}},
          { "data": "EndDateEmpStatus", "name": "EndDateEmpStatus","render":function (value) {
            if (value === null) return "";

            var pattern = /Date\(([^)]+)\)/;
            var results = pattern.exec(value);
            var dt = new Date(parseFloat(results[1]));

            return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();} },
          { "data": "JobTitle", "name": "JobTitle" },


          { "data": "Department", "name": "Department"},
          { "data": "DepartmentName", "name": "DepartmentName"},
          { "data": "ManagerName", "name": "ManagerName"},
          { "data": "EmploymentType", "name": "EmploymentType" },
          { "data": "StartDateEmpEmploymentType", "name": "StartDateEmpEmploymentType","render":function (value) {
            if (value === null) return "";

            var pattern = /Date\(([^)]+)\)/;
            var results = pattern.exec(value);
            var dt = new Date(parseFloat(results[1]));

            return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();} },


          { "data": "EndDateEmpEmploymentType", "name": "EndDateEmpEmploymentType","render":function (value) {
            if (value === null) return "";

            var pattern = /Date\(([^)]+)\)/;
            var results = pattern.exec(value);
            var dt = new Date(parseFloat(results[1]));

            return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();}},
          { "data": "AttendanceDefault", "name": "AttendanceDefault"},
          { "data": "Cader", "name": "Cader"},
          { "data": "PlacementStatus", "name": "PlacementStatus" },
          { "data": "PlacementType", "name": "PlacementType" },

          { "data": "Qualification", "name": "Qualification"},
          { "data": "Specialization", "name": "Specialization"},
          { "data": "BasicSalary", "name": "BasicSalary" },
          {

            "targets": 0,
            "defaultContent": "",
            "orderable": false,
            "searchable": false
          }

        ],

        buttons: [
          //{ extend: 'print', className: 'btn dark btn-outline', text: 'طباعة', exportOptions: { columns: ':visible' }  },
          { extend: 'copy', className: 'btn red btn-outline', text: 'نسخ', exportOptions: { columns: ':visible' }  },
          //{ extend: 'pdf', className: 'btn green btn-outline', exportOptions: { columns: ':visible' }  },
          { extend: 'excel', className: 'btn yellow btn-outline ', exportOptions:{columns: ':visible'} },
          { extend: 'csv', className: 'btn purple btn-outline ', exportOptions: { columns: ':visible' }  },
          { extend: 'colvis', className: 'btn dark btn-outline', text: 'الحقول', exportOptions: { columns: ':visible' }  }
        ],

        // setup responsive extension: http://datatables.net/extensions/responsive/

        "orderCellsTop": true,

        "scrollY": 400,
        "scrollX": true,


        //"ordering": false, disable column ordering
        //"paging": false, disable pagination

        "order": [
          [1, 'asc']
        ],

        "lengthMenu": [
          [ 10, 15, 20, -1],
          [ 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,

        "dom":
          "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",
      });

      $('#sample_1 tbody').on('click',
        'tr',
        function () {
          if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
          } else {
            oTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');
          }
        });

      $('#btnSearch').click(function () {
        oTable.fnFilter();
      });


    };


    return {

      //main function to initiate the module
      init: function () {

        if (!jQuery().dataTable) {
          return;
        }

        initTable1();

      }

    };

  }();

  jQuery(document).ready(function () {
    TableDatatablesButtons.init();

    $('#filter-cancel').click(function() {
      $('.form-control').val('');
    });


  });


  </script>
  <!-- END PAGE LEVEL SCRIPTS -->

}

@section PageBreadcrumb{
  @*<li>
      <a href="/Home/Index">الرئيسية</a>
      <i class="fa fa-circle"></i>
    </li>
    <li>
      <a href="/Home/Index"> .. </a>
      <i class="fa fa-circle"></i>
    </li>
    <li>
      <a> .. </a>
    </li>*@
}







<div class="row">
  <div class="col-md-12">
    <!-- BEGIN EXAMPLE TABLE PORTLET-->
    <div class="portlet light bordered">
      <div class="portlet-title">
        <div class="caption font-dark">
          <i class="icon-settings font-dark"></i>
          <span class="caption-subject bold uppercase">تقرير الموظفين</span>
        </div>
        <div class="tools"> </div>
      </div>
      <div class="portlet-body">
        <table class="table table-striped table-bordered table-hover " id="sample_1">
          <thead>
            <tr role="row" class="heading">
              <th class="text-nowrap" style="">الرقم الوظيفي    </th>
              <th class="text-nowrap" style="min-width: 150px">الاسم بالعربية كاملاُ</th>
              <th class="text-nowrap" style="min-width: 150px">الاسم بالانجليزية كاملاُ</th>
              <th class="text-nowrap" style="min-width: 150px">الاسم الأول</th>
              <th class="text-nowrap" style="min-width: 150px"> الاسم الثاني</th>
              <th class="text-nowrap" style="min-width: 150px"> الاسم الثالث</th>
              <th class="text-nowrap" style="min-width: 150px"> اسم العائلة</th>
              <th class="text-nowrap" style="min-width: 100px">الجنس</th>
              <th class="text-nowrap" style="min-width: 150px">تاريخ الميلاد</th>
              <th class="text-nowrap" style="min-width: 150px">رقم الهوية</th>
              <th class="text-nowrap" style="min-width: 150px">الحالة الإجتماعية</th>
              <th class="text-nowrap" style="min-width: 150px">عدد الأبناء</th>
              <th class="text-nowrap" style="min-width: 150px">العنوان كاملاً</th>
              <th class="text-nowrap" style="min-width: 150px">الجوال</th>
              <th class="text-nowrap" style="min-width: 150px">الايميل الجامعي</th>
              <th class="text-nowrap" style="min-width: 150px">البريد الالكتروني</th>
              <th class="text-nowrap" style="min-width: 150px">الحالة</th>
              <th class="text-nowrap" style="min-width: 150px">تاريخ بدء الحالة</th>
              <th class="text-nowrap" style="min-width: 150px">تاريخ نهاية الحالة</th>
              <th class="text-nowrap" style="min-width: 150px">المسمى الوظيفي</th>
              <th class="text-nowrap" style="min-width: 150px">الدائرة</th>
              <th class="text-nowrap" style="min-width: 150px">القسم</th>
              <th class="text-nowrap" style="min-width: 150px">المسؤول المباشر</th>
              <th class="text-nowrap" style="min-width: 150px">نوع التعيين</th>
              <th class="text-nowrap" style="min-width: 150px"> تاريخ بدء التعيين</th>
              <th class="text-nowrap" style="min-width: 150px"> تاريخ نهاية التعيين</th>
              <th class="text-nowrap" style="min-width: 200px"> الدوام الافتراضي</th>
              <th class="text-nowrap" style="min-width: 150px">الكادر</th>
              <th class="text-nowrap" style="min-width: 150px">حالة الانتساب</th>
              <th class="text-nowrap" style="min-width: 150px">نوع الانتساب</th>
              <th class="text-nowrap" style="min-width: 150px">المؤهل العلمي الأخير</th>
              <th class="text-nowrap" style="min-width: 150px">التخصص</th>
              <th class="text-nowrap" style="min-width: 150px">الراتب</th>
              <th class="text-nowrap" style="min-width: 150px">ادوات</th>
            </tr>


          <tr role="row" class="filter">

            <td>
              @Html.TextBoxFor(model => model.EmployeeNo, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.ArName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.EnName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.ArFirstName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.ArSecoundName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.ArThirdName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.ArFamilyName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.DropDownListFor(model => model.Gender, new SelectList(SelectDA.ddlGenders(), "Value", "Text"), "إختر ..", new { @class = "form-control" })

            </td>
            <td>
              <div class="input-group date date-picker margin-bottom-5" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.DateOfBirthFrom, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
              <div class="input-group date date-picker" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.DateOfBirthTo, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
            </td>
            <td>
              @Html.TextBoxFor(model => model.SSN, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.DropDownListFor(model => model.MaritalStatusID, new SelectList(SelectDA.ddlMaritalStatuses(), "Value", "Text"), "إختر .. ", new { @class = "form-control" })
            </td>
            <td>
              @Html.TextBoxFor(model => model.ChildrensCount, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.Address, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.Mobile, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.UniversityEmail, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.Email, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.EmployeeStatus, new {@class = "form-control form-filter input-sm"})
            </td>
            @*<td>
              @Html.TextBoxFor(model => model.StartDateEmpStatus, new {@class = "form-control form-filter input-sm"})

            </td>*@
          <td>
            <div class="input-group date date-picker margin-bottom-5" data-date-format="dd/mm/yyyy">
              @Html.TextBoxFor(model => model.StartDateEmpStatusFrom, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
              <span class="input-group-btn">
                <button class="btn btn-sm default" type="button">
                  <i class="fa fa-calendar"></i>
                </button>
              </span>
            </div>
            <div class="input-group date date-picker" data-date-format="dd/mm/yyyy">
              @Html.TextBoxFor(model => model.StartDateEmpStatusTo, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
              <span class="input-group-btn">
                <button class="btn btn-sm default" type="button">
                  <i class="fa fa-calendar"></i>
                </button>
              </span>
            </div>
          </td>
            @*<td>
                  @Html.TextBoxFor(model => model.EndDateEmpStatus, new { @class = "form-control form-filter input-sm" })
                </td>*@
            <td>
              <div class="input-group date date-picker margin-bottom-5" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.EndDateEmpStatusFrom, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
              <div class="input-group date date-picker" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.EndDateEmpStatusTo, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
            </td>
            <td>
              @Html.TextBoxFor(model => model.JobTitle, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.Department, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.DepartmentName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.ManagerName, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.DropDownListFor(model => model.EmploymentType, new SelectList(SelectDA.ddlEmploymentTypes(null), "Value", "Text"), "جميع أنواع التوظيف", new { @class = "form-control" })
            </td>
            @*<td>
                  @Html.TextBoxFor(model => model.StartDateEmpStatus, new { @class = "form-control form-filter input-sm" })
                </td>*@
            <td>
              <div class="input-group date date-picker margin-bottom-5" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.StartDateEmpEmploymentTypeFrom, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
              <div class="input-group date date-picker" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.StartDateEmpEmploymentTypeTo, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
            </td>
            @*<td>
                  @Html.TextBoxFor(model => model.EndDateEmpStatus, new { @class = "form-control form-filter input-sm" })
                </td>*@
            <td>
              <div class="input-group date date-picker margin-bottom-5" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.EndDateEmpEmploymentTypeFrom, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
              <div class="input-group date date-picker" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.EndDateEmpEmploymentTypeTo, new {@class = "form-control form-filter input-sm", @readonly = "readonly", @name = "order_date_from", @placeholder = "من"})
                <span class="input-group-btn">
                  <button class="btn btn-sm default" type="button">
                    <i class="fa fa-calendar"></i>
                  </button>
                </span>
              </div>
            </td>
            <td>
              @Html.DropDownListFor(model => model.AttendanceDefault, new SelectList(SelectDA.ddlAttendanceFormats(), "Value", "Text"), "جميع أنواع نسق الدوام", new { @class = "form-control" })

            </td>
            <td>
              @*@Html.TextBoxFor(model => model.Cader, new {@class = "form-control form-filter input-sm"})*@
              @Html.DropDownListFor(model => model.CaderID, new SelectList(SelectDA.ddlCaders(), "Value", "Text"), "إختر .. ", new { @class = "form-control" })

            </td>
            <td>
              @*@Html.TextBoxFor(model => model.PlacementStatus, new {@class = "form-control form-filter input-sm"})*@
              @Html.DropDownListFor(model => model.PlacementStatusID, new SelectList(SelectDA.ddlPlacementStatuses(), "Value", "Text"), "إختر .. ", new { @class = "form-control" })

            </td>
            <td>
              @*@Html.TextBoxFor(model => model.PlacementType, new {@class = "form-control form-filter input-sm"})*@
              @Html.DropDownListFor(model => model.PlacementTypeID, new SelectList(SelectDA.ddlPlacementTypes(), "Value", "Text"), "إختر .. ", new { @class = "form-control" })

            </td>
            <td>
              @*@Html.TextBoxFor(model => model.Qualification, new {@class = "form-control form-filter input-sm"})*@
              @Html.DropDownListFor(model => model.QualificationTypeID, new SelectList(SelectDA.ddlQualificationTypes(), "Value", "Text"), "إختر .. ", new { @class = "form-control" })

            </td>
            <td>
              @Html.TextBoxFor(model => model.Specialization, new {@class = "form-control form-filter input-sm"})
            </td>
            <td>
              @Html.TextBoxFor(model => model.BasicSalaryFrom, new {@class = "form-control form-filter input-sm margin-bottom-5", @placeholder = "من"})
              @Html.TextBoxFor(model => model.BasicSalaryTo, new {@class = "form-control form-filter input-sm margin-bottom-5", @placeholder = "الى"})
            </td>

            <td>
              <div class="margin-bottom-5">
                <button id="btnSearch" class="btn btn-sm green  filter-submit margin-bottom btn-block">
                  <i class="fa fa-search"></i> بحث
                </button>
              </div>
              <button id="filter-cancel" class="btn btn-sm red  filter-cancel btn-block">
                <i class="fa fa-times"></i> اعادة تعيين
              </button>
            </td>

          </tr>

          </thead>

        </table>
      </div>
    </div>
    <!-- END EXAMPLE TABLE PORTLET-->





  </div>
</div>









@*<div class="panel panel-default">
        <div class="panel-body">
          @Html.Partial("_MVCGridToolbar", new MVCGridToolbarModel()
          {
            MVCGridName = "PermissionGetAllGrid",
            PageSize = true,
            ColumnVisibility = true,
            Export = true,
            GlobalSearch = true
          })
          @Html.MVCGrid("PermissionGetAllGrid")
        </div>
      </div>


      <script>
        $('#tabExportButton').click(function () {
          location.href = MVCGrid.getEngineExportUrl('CustomExport', 'tabs');
        });
      </script>
  @*<h3>VueJS 2 in ASP.NET MVC 5</h3>

    <div id="aboutPage">
      {{ message }}
    </div>

    <script>
      var aboutPage = new Vue({
        el: '#aboutPage',
        data: {
          message: 'Hello Vue! in Israa System'
        }
      });
    </script>*@




